{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./AIchat.css\";\nconst ChatAIApp = () => {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [theme, setTheme] = useState(\"dark_mode\");\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [isResponseGenerating, setIsResponseGenerating] = useState(false);\n  const API_KEY = \"AIzaSyCVqQlTN7ylrRha-gzAdggRmsSPpyNfm0A\"; // Thay thế bằng API key của bạn.\n  const API_URL = `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}`;\n  useEffect(() => {\n    const savedChats = JSON.parse(localStorage.getItem(\"saved-chats\")) || [];\n    const savedTheme = localStorage.getItem(\"themeColor\") || \"dark_mode\";\n    setChats(savedChats);\n    setTheme(savedTheme);\n    document.body.classList.toggle(\"light_mode\", savedTheme === \"light_mode\");\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"saved-chats\", JSON.stringify(chats));\n    localStorage.setItem(\"themeColor\", theme);\n  }, [chats, theme]);\n  const toggleTheme = () => {\n    const newTheme = theme === \"dark_mode\" ? \"light_mode\" : \"dark_mode\";\n    setTheme(newTheme);\n    document.body.classList.toggle(\"light_mode\", newTheme === \"light_mode\");\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!userMessage.trim() || isResponseGenerating) return;\n    const newChats = [...chats, {\n      type: \"outgoing\",\n      text: userMessage\n    }];\n    setChats(newChats);\n    setUserMessage(\"\");\n    setIsResponseGenerating(true);\n    try {\n      const response = await fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            role: \"user\",\n            parts: [{\n              text: userMessage\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error.message);\n      const apiResponse = data === null || data === void 0 ? void 0 : data.candidates[0].content.parts[0].text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\n      setChats(prevChats => [...prevChats, {\n        type: \"incoming\",\n        text: apiResponse\n      }]);\n    } catch (error) {\n      setChats(prevChats => [...prevChats, {\n        type: \"error\",\n        text: error.message\n      }]);\n    } finally {\n      setIsResponseGenerating(false);\n    }\n  };\n  const handleDeleteChats = () => {\n    if (window.confirm(\"Bạn có chắc chắn muốn xóa toàn bộ đoạn chat?\")) {\n      setChats([]);\n    }\n  };\n  return bod;\n};\n_s(ChatAIApp, \"kaVBcyysH5ByBORbaAGmytbo1XY=\");\n_c = ChatAIApp;\nexport default ChatAIApp;\nvar _c;\n$RefreshReg$(_c, \"ChatAIApp\");","map":{"version":3,"names":["React","useState","useEffect","ChatAIApp","_s","chats","setChats","theme","setTheme","userMessage","setUserMessage","isResponseGenerating","setIsResponseGenerating","API_KEY","API_URL","savedChats","JSON","parse","localStorage","getItem","savedTheme","document","body","classList","toggle","setItem","stringify","toggleTheme","newTheme","handleSendMessage","e","preventDefault","trim","newChats","type","text","response","fetch","method","headers","contents","role","parts","data","json","ok","Error","error","message","apiResponse","candidates","content","replace","prevChats","handleDeleteChats","window","confirm","bod","_c","$RefreshReg$"],"sources":["D:/Nội Dung Trên Trường/WebCoolmate/client/src/components/Message/AIchat.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./AIchat.css\";\r\n\r\nconst ChatAIApp = () => {\r\n  const [chats, setChats] = useState([]);\r\n  const [theme, setTheme] = useState(\"dark_mode\");\r\n  const [userMessage, setUserMessage] = useState(\"\");\r\n  const [isResponseGenerating, setIsResponseGenerating] = useState(false);\r\n\r\n  const API_KEY = \"AIzaSyCVqQlTN7ylrRha-gzAdggRmsSPpyNfm0A\"; // Thay thế bằng API key của bạn.\r\n  const API_URL = `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}`;\r\n\r\n  useEffect(() => {\r\n    const savedChats = JSON.parse(localStorage.getItem(\"saved-chats\")) || [];\r\n    const savedTheme = localStorage.getItem(\"themeColor\") || \"dark_mode\";\r\n    setChats(savedChats);\r\n    setTheme(savedTheme);\r\n    document.body.classList.toggle(\"light_mode\", savedTheme === \"light_mode\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"saved-chats\", JSON.stringify(chats));\r\n    localStorage.setItem(\"themeColor\", theme);\r\n  }, [chats, theme]);\r\n\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === \"dark_mode\" ? \"light_mode\" : \"dark_mode\";\r\n    setTheme(newTheme);\r\n    document.body.classList.toggle(\"light_mode\", newTheme === \"light_mode\");\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!userMessage.trim() || isResponseGenerating) return;\r\n\r\n    const newChats = [\r\n      ...chats,\r\n      { type: \"outgoing\", text: userMessage },\r\n    ];\r\n    setChats(newChats);\r\n    setUserMessage(\"\");\r\n    setIsResponseGenerating(true);\r\n\r\n    try {\r\n      const response = await fetch(API_URL, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          contents: [\r\n            {\r\n              role: \"user\",\r\n              parts: [{ text: userMessage }],\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) throw new Error(data.error.message);\r\n\r\n      const apiResponse = data?.candidates[0].content.parts[0].text.replace(\r\n        /\\*\\*(.*?)\\*\\*/g,\r\n        \"$1\"\r\n      );\r\n      setChats((prevChats) => [\r\n        ...prevChats,\r\n        { type: \"incoming\", text: apiResponse },\r\n      ]);\r\n    } catch (error) {\r\n      setChats((prevChats) => [\r\n        ...prevChats,\r\n        { type: \"error\", text: error.message },\r\n      ]);\r\n    } finally {\r\n      setIsResponseGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteChats = () => {\r\n    if (window.confirm(\"Bạn có chắc chắn muốn xóa toàn bộ đoạn chat?\")) {\r\n      setChats([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    \r\n    bod\r\n  );\r\n};\r\n\r\nexport default ChatAIApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}